import enum
import logging
import re
import pathlib
from typing import (Any, Callable, Dict, Final, Generator, Iterable, List,
                    Literal, Optional, Set, Tuple, TypedDict, Union, cast,
                    overload)


class OutChoice(str, enum.Enum):
    """Output format choices"""

    TXT: str = "text"
    JSON: str = "json"
    DOT: str = "dot"

class QueryType(str, enum.Enum):
    """Possible query types"""

    SOURCE: str = "source"
    TARGET: str = "target"
    DEPENDENCY: str = "dependency"

NodeType = str
"""Type of a node."""

ResultDict = TypedDict(
    "ResultDict", {"sources": List[str], "target": List[Tuple[str, str]]}, total=False
)
"""Type of a result dict (used in formatter)."""


# TODO(dm): Wait until TypedDict accept Final as keys to rewrite this
class Section(TypedDict, total=False):
    section_type: str
    section_name: str
    project_name : str
    project_path : pathlib.Path
    soong_file_path : pathlib.Path

    # Some value names from Soong
    defaults: Union[str, List[str]]

def getSectionKey(section : Section) -> str:
    return section["section_name"] + "\n" + section["section_type"] + "\n" + str(section["soong_file_path"])

def getSectionName(section : Section) -> str:
    return section["section_type"] + " " + str(section["soong_file_path"]) + " " + section["section_name"]

class SectionNode:

    def __init__(self, section : Section = None):
        self.section = section
        self.up_level_nodes : Set[SectionNode] = set()
        self.up_level_dep_ways : Dict[SectionNode, str] = {}
        self.down_level_nodes : Set[(SectionNode, str)] = set()
        self.down_level_dep_ways : Dict[SectionNode, str] = {}
        self.merged_nodes : Set[SectionNode] = set()

    def __key(self):
        if self.section:
            return (self.section['soong_file_path'], self.section['section_type'], self.section['section_name'])
        else:
            raise LookupError

    def __hash__(self):
        return hash(self.__key())

    def __eq__(self, other):
        if isinstance(other, SectionNode):
            return self.__key() == other.__key()
        else:
            raise LookupError

    def name(self):
        return getSectionKey(self.section)

    def name2(self):
        return getSectionName(self.section)

excluded_sub_types = [ "export_include_dirs", "apex_available", "stem", "pkg_path", "relative_install_path" ]
excluded_section_types = [ "genrule", "filegroup" ]
# xcluded_section_types = [ "genrule", "filegroup", "java_sdk_library" ]

# module_and_sub_type = [
#     ({ "module_type" : "cc_binary" },
#      [{ "depend_type" : "cc_library_shared" },
#       ]),
#     ({ "module_type" : "cc_library_shared" },
#      [{ "depend_type" : "shared_libs" }, { "depend_type" : "static_libs" },
#       ]),
#     ({ "name" : "cc_binary_host" },
#      [{ "name" : "cc_library_shared", "host_supported" : True },
#       ]),
# ]

def is_defaults_module(node : SectionNode) -> bool:
    return re.search("^\w+_defaults\Z", node.section['section_type'])

def check_host_supported_matching(l : SectionNode, r : SectionNode) -> bool:
    host_supported = 'host_supported'
    if host_supported in l.section and host_supported in r.section:
        return l.section[host_supported] == r.section[host_supported]
    elif host_supported not in l.section and host_supported not in r.section:
        return True
    elif host_supported in l.section and host_supported not in r.section:
        return l.section[host_supported] == False
    elif host_supported not in l.section and host_supported in r.section:
        return r.section[host_supported] == False
    else:
        raise LookupError



def depends_on_impl(up : SectionNode, down : SectionNode) -> (bool, str):
    if (up == down or
        up.section['section_type'] in excluded_section_types or
        down.section['section_type'] in excluded_section_types or
        up.section['section_name'] == down.section['section_name'] or
        is_defaults_module(up) or is_defaults_module(down) or
        check_host_supported_matching(up, down) is False):
        return False, None

    for sub_type, values in up.section.items():
        if sub_type in excluded_sub_types:
            pass
        elif isinstance(values, str):
            if down.section['section_name'] == values:
                return True, sub_type
        elif isinstance(values, list):
            if down.section['section_name'] in values:
                return True, sub_type

    return False, None


def depends_on(up : Section, down : Section) -> (bool, bool, str):
    success, section_type = depends_on_impl(up, down)
    if success is True:
        return True, True, section_type
    else:
        success, section_type = depends_on_impl(down, up)
        if success is True:
            return True, False, section_type
        else:
            return False, False, None


all_module_types = [
    "javadoc", "display_go_defaults_sm7250", "rust_test", "dex_import", "aidl_mapping", "versioned_ndk_headers", "llvm_defaults", "libart_static_cc_defaults", "cc_benchmark_host", "generate_mojom_downgraded_files", "prebuilt_apis", "llndk_headers", "sanitizer_status_library_shared", "art_debug_defaults", "generate_mojom_pickles", "rust_binary_host", "aidl_interfaces_metadata", "target_fs_config_gen_filegroup", "hidl_interfaces_metadata", "art_apex_test_host", "generate_mojom_srcjar", "sh_test_host", "rust_defaults", "display_go_defaults", "robolectric_build_props", "llvm_host_defaults", "force_build_llvm_components_defaults", "generate_mojom_headers", "hiddenapi_flags", "art_apex_test", "clang_builtin_headers", "generate_mojom_srcs", "llvm_prebuilt_library_static", "art_apex", "kernel_headers", "bootstrap_go_binary", "sdk", "rust_prebuilt_dylib", "art_global_defaults", "java_host_for_device", "soong_config_module_type", "droidstubs_host", "global_compat_config", "libart_cc_defaults", "tradefed_java_library_host", "droiddoc_host", "droiddoc", "ca_certificates_host", "ca_certificates", "java_genrule_host", "override_apex", "java_system_modules", "llvm_darwin_filegroup", "apex_vndk", "llvm_host_prebuilt_library_shared", "android_app_import", "module_exports", "rust_library_dylib", "service_contexts", "wayland_protocol_codegen", "platform_compat_config", "art_cc_library_static", "hwservice_contexts", "file_contexts", "prebuilt_usr_share", "vndk_libraries_txt", "fluoride_defaults", "property_contexts", "toolchain_library", "droiddoc_exported_dir", "libclang_rt_llndk_library", "rust_proc_macro", "stubs_defaults", "python_test", "bpf", "vintf_compatibility_matrix", "tradefed_binary_host", "sysprop_library", "java_device_for_host", "clang_tblgen", "java_sdk_library_import", "prebuilt_etc_host", "android_test_import", "llvm_tblgen", "genrule_defaults", "art_cc_test_library", "cc_library_host_shared", "hidl_package_root", "droidstubs", "apex_test", "se_filegroup", "rust_test_host", "kernel_config", "java_test_helper_library", "gensrcs", "sh_binary_host", "se_cil_compat_map", "art_cc_defaults", "apex_defaults", "java_binary", "cc_object", "llndk_library", "libclang_rt_prebuilt_library_shared", "java_plugin", "rust_library_rlib", "android_robolectric_test", "ndk_library", "xsd_config", "java_sdk_library", "art_cc_test", "cc_prebuilt_library_shared", "java_test", "java_genrule", "sh_binary", "cc_genrule", "python_defaults", "ndk_headers", "blueprint_go_binary", "phony", "python_library", "cc_prebuilt_binary", "art_cc_binary", "prebuilt_apex", "libclang_rt_prebuilt_library_static", "python_test_host", "rust_library_host_rlib", "apex_key", "cc_benchmark", "runtime_resource_overlay", "python_library_host", "android_app_certificate", "sh_test", "java_binary_host", "prebuilt_usr_share_host", "aidl_interface", "cc_library_host_static", "cc_fuzz", "cc_test_host", "ndk_prebuilt_object", "apex", "art_cc_library", "java_defaults", "python_binary_host", "bootstrap_go_package", "java_import_host", "java_import", "java_library_static", "android_library_import", "java_library_host", "cc_binary_host", "prebuilt_etc", "hidl_interface", "cc_library_headers", "android_library", "prebuilt_font", "android_app", "java_test_host", "java_library", "cc_test_library", "cc_library", "vts_config", "genrule", "cc_library_shared", "cc_binary", "android_test", "cc_defaults", "filegroup", "android_test_helper_app", "cc_library_static", "cc_test", "vndk_prebuilt_shared"
    ]
